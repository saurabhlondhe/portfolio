{"version":3,"sources":["components/DecoderText/index.js","components/Divider/index.js","components/Input/TextArea.js","components/Input/index.js","pages/Contact/index.js","utils/prerender.js","components/Section/index.js","assets/fonts/gotham-bold.woff2","components/Heading/index.js","components/Text/index.js"],"names":["glyphs","CharType","DecoderText","text","start","delay","startDelay","className","rest","output","useRef","type","value","container","reduceMotion","usePrefersReducedMotion","useEffect","containerInstance","current","content","split","animation","renderOutput","characterMap","map","item","innerHTML","join","springValue","position","index","rand","Math","floor","random","length","shuffle","prerender","chain","spring","from","to","stiffness","damping","stop","classNames","ref","memo","Divider","lineWidth","lineHeight","notchWidth","notchHeight","collapseDelay","collapsed","style","numToMs","defaultProps","TextArea","resize","onChange","minRows","maxRows","rows","setRows","useState","textareaDimensions","setTextareaDimensions","textareaRef","getComputedStyle","parseInt","paddingHeight","paddingTop","paddingBottom","event","previousRows","target","currentRows","scrollHeight","scrollTop","Input","id","label","hasValue","multiline","error","onBlur","focused","setFocused","generatedId","useId","errorRef","inputId","labelId","errorId","InputElement","htmlFor","undefined","onFocus","TransitionGroup","component","Transition","timeout","msToNum","tokens","base","durationM","status","role","isVisible","numToPx","getBoundingClientRect","height","Icon","icon","initDelay","durationS","getDelay","delayMs","initDelayMs","multiplier","numDelay","toFixed","Contact","useRouteTransition","email","useFormInput","message","sending","setSending","complete","setComplete","statusError","setStatusError","useScrollRestore","onSubmit","useCallback","async","preventDefault","response","fetch","method","mode","headers","body","JSON","stringify","responseMessage","json","errorMessage","fallback","getStatusError","Error","Section","Helmet","name","appear","mountOnEnter","unmountOnExit","onEnter","reflow","Heading","level","as","durationXS","required","autoComplete","maxLength","errorStatus","Button","disabled","loading","loadingText","Text","size","secondary","iconHoverShift","href","navigator","userAgent","forwardRef","Component","children","align","weight","clampedLevel","min","max","rel","GothamBold","crossorigin"],"mappings":"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","file":"static/js/7.b3743623.chunk.js","sourcesContent":["import { useRef, useEffect, memo } from 'react';\r\nimport classNames from 'classnames';\r\nimport { usePrefersReducedMotion } from 'hooks';\r\nimport { spring, chain, delay, value } from 'popmotion';\r\nimport VisuallyHidden from 'components/VisuallyHidden';\r\nimport prerender from 'utils/prerender';\r\nimport './index.css';\r\n\r\n// prettier-ignore\r\nconst glyphs = [\r\n  'ア', 'イ', 'ウ', 'エ', 'オ',\r\n  'カ', 'キ', 'ク', 'ケ', 'コ',\r\n  'サ', 'シ', 'ス', 'セ', 'ソ',\r\n  'タ', 'チ', 'ツ', 'テ', 'ト',\r\n  'ナ', 'ニ', 'ヌ', 'ネ', 'ノ',\r\n  'ハ', 'ヒ', 'フ', 'ヘ', 'ホ',\r\n  'マ', 'ミ', 'ム', 'メ', 'モ',\r\n  'ヤ', 'ユ', 'ヨ', 'ー',\r\n  'ラ', 'リ', 'ル', 'レ', 'ロ',\r\n  'ワ', 'ヰ', 'ヱ', 'ヲ', 'ン',\r\n  'ガ', 'ギ', 'グ', 'ゲ', 'ゴ',\r\n  'ザ', 'ジ', 'ズ', 'ゼ', 'ゾ',\r\n  'ダ', 'ヂ', 'ヅ', 'デ', 'ド',\r\n  'バ', 'ビ', 'ブ', 'ベ', 'ボ',\r\n  'パ', 'ピ', 'プ', 'ペ', 'ポ',\r\n];\r\n\r\nconst CharType = {\r\n  Glyph: 'glyph',\r\n  Value: 'value',\r\n};\r\n\r\nfunction shuffle(content, output, position) {\r\n  return content.map((value, index) => {\r\n    if (index < position) {\r\n      return { type: CharType.Value, value };\r\n    }\r\n\r\n    if (position % 1 < 0.5) {\r\n      const rand = Math.floor(Math.random() * glyphs.length);\r\n      return { type: CharType.Glyph, value: glyphs[rand] };\r\n    }\r\n\r\n    return { type: CharType.Glyph, value: output[index].value };\r\n  });\r\n}\r\n\r\nconst DecoderText = ({\r\n  text,\r\n  start = true,\r\n  delay: startDelay = 0,\r\n  className,\r\n  ...rest\r\n}) => {\r\n  const output = useRef([{ type: CharType.Glyph, value: '' }]);\r\n  const container = useRef();\r\n  const reduceMotion = usePrefersReducedMotion();\r\n\r\n  useEffect(() => {\r\n    const containerInstance = container.current;\r\n    const content = text.split('');\r\n    let animation;\r\n\r\n    const renderOutput = () => {\r\n      const characterMap = output.current.map(item => {\r\n        return `<span class=\"decoder-text__${item.type}\">${item.value}</span>`;\r\n      });\r\n\r\n      containerInstance.innerHTML = characterMap.join('');\r\n    };\r\n\r\n    const springValue = value(0, position => {\r\n      output.current = shuffle(content, output.current, position);\r\n      renderOutput();\r\n    });\r\n\r\n    if (start && !animation && !reduceMotion && !prerender) {\r\n      animation = chain(\r\n        delay(startDelay),\r\n        spring({\r\n          from: 0,\r\n          to: content.length,\r\n          stiffness: 8,\r\n          damping: 5,\r\n        })\r\n      ).start(springValue);\r\n    }\r\n\r\n    if (reduceMotion) {\r\n      output.current = content.map((value, index) => ({\r\n        type: CharType.Value,\r\n        value: content[index],\r\n      }));\r\n      renderOutput();\r\n    }\r\n\r\n    return () => {\r\n      if (animation) {\r\n        animation.stop();\r\n      }\r\n    };\r\n  }, [reduceMotion, start, startDelay, text]);\r\n\r\n  return (\r\n    <span className={classNames('decoder-text', className)} {...rest}>\r\n      <VisuallyHidden className=\"decoder-text__label\">{text}</VisuallyHidden>\r\n      <span aria-hidden className=\"decoder-text__content\" ref={container} />\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default memo(DecoderText);\r\n","import classNames from 'classnames';\r\nimport { numToMs } from 'utils/style';\r\nimport './index.css';\r\n\r\nconst Divider = ({\r\n  lineWidth,\r\n  lineHeight,\r\n  notchWidth,\r\n  notchHeight,\r\n  collapseDelay,\r\n  collapsed,\r\n  className,\r\n  style,\r\n}) => (\r\n  <div\r\n    className={classNames('divider', className)}\r\n    style={{\r\n      '--lineWidth': lineWidth,\r\n      '--lineHeight': lineHeight,\r\n      '--notchWidth': notchWidth,\r\n      '--notchHeight': notchHeight,\r\n      '--collapseDelay': numToMs(collapseDelay),\r\n      ...style,\r\n    }}\r\n  >\r\n    <div\r\n      className={classNames('divider__line', { 'divider__line--collapsed': collapsed })}\r\n    />\r\n    <div\r\n      className={classNames('divider__notch', { 'divider__notch--collapsed': collapsed })}\r\n      style={{ '--collapseDelay': numToMs(collapseDelay + 160) }}\r\n    />\r\n  </div>\r\n);\r\n\r\nDivider.defaultProps = {\r\n  lineWidth: '100%',\r\n  lineHeight: '2px',\r\n  notchWidth: '90px',\r\n  notchHeight: '10px',\r\n  collapsed: false,\r\n  collapseDelay: 0,\r\n};\r\n\r\nexport default Divider;\r\n","import { useRef, useState, useEffect } from 'react';\r\nimport classNames from 'classnames';\r\nimport './TextArea.css';\r\n\r\nconst TextArea = ({\r\n  className,\r\n  resize = 'none',\r\n  value,\r\n  onChange,\r\n  minRows = 1,\r\n  maxRows,\r\n  ...rest\r\n}) => {\r\n  const [rows, setRows] = useState(minRows);\r\n  const [textareaDimensions, setTextareaDimensions] = useState();\r\n  const textareaRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const style = getComputedStyle(textareaRef.current);\r\n    const lineHeight = parseInt(style.lineHeight, 10);\r\n    const paddingHeight =\r\n      parseInt(style.paddingTop, 10) + parseInt(style.paddingBottom, 10);\r\n    setTextareaDimensions({ lineHeight, paddingHeight });\r\n  }, []);\r\n\r\n  const handleChange = event => {\r\n    onChange(event);\r\n\r\n    const { lineHeight, paddingHeight } = textareaDimensions;\r\n    const previousRows = event.target.rows;\r\n    event.target.rows = minRows;\r\n\r\n    const currentRows = ~~((event.target.scrollHeight - paddingHeight) / lineHeight);\r\n\r\n    if (currentRows === previousRows) {\r\n      event.target.rows = currentRows;\r\n    }\r\n\r\n    if (maxRows && currentRows >= maxRows) {\r\n      event.target.rows = maxRows;\r\n      event.target.scrollTop = event.target.scrollHeight;\r\n    }\r\n\r\n    setRows(maxRows && currentRows > maxRows ? maxRows : currentRows);\r\n  };\r\n\r\n  return (\r\n    <textarea\r\n      className={classNames('textarea', className)}\r\n      ref={textareaRef}\r\n      onChange={handleChange}\r\n      style={{ '--resize': resize }}\r\n      rows={rows}\r\n      value={value}\r\n      {...rest}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TextArea;\r\n","import { useState, useRef } from 'react';\r\nimport classNames from 'classnames';\r\nimport { TransitionGroup, Transition } from 'react-transition-group';\r\nimport TextArea from './TextArea';\r\nimport { useId } from 'hooks';\r\nimport { isVisible } from 'utils/transition';\r\nimport { tokens } from 'components/ThemeProvider/theme';\r\nimport { msToNum, numToPx } from 'utils/style';\r\nimport Icon from 'components/Icon';\r\nimport './index.css';\r\n\r\nconst Input = ({\r\n  id,\r\n  label,\r\n  hasValue,\r\n  value,\r\n  multiline,\r\n  className,\r\n  style,\r\n  error,\r\n  onBlur,\r\n  ...rest\r\n}) => {\r\n  const [focused, setFocused] = useState(false);\r\n  const generatedId = useId();\r\n  const errorRef = useRef();\r\n  const inputId = id || `input-${generatedId}`;\r\n  const labelId = `${inputId}-label`;\r\n  const errorId = `${inputId}-error`;\r\n  const InputElement = multiline ? TextArea : 'input';\r\n\r\n  const handleBlur = event => {\r\n    setFocused(false);\r\n\r\n    if (onBlur) {\r\n      onBlur(event);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={classNames('input', className, { 'input--error': !!error })}\r\n      style={style}\r\n    >\r\n      <div className=\"input__content\">\r\n        <label\r\n          className={classNames('input__label', {\r\n            'input__label--focused': focused,\r\n            'input__label--has-value': !!value,\r\n          })}\r\n          id={labelId}\r\n          htmlFor={inputId}\r\n        >\r\n          {label}\r\n        </label>\r\n        <InputElement\r\n          className=\"input__element\"\r\n          id={inputId}\r\n          aria-labelledby={labelId}\r\n          aria-describedby={!!error ? errorId : undefined}\r\n          onFocus={() => setFocused(true)}\r\n          onBlur={handleBlur}\r\n          value={value}\r\n          {...rest}\r\n        />\r\n        <div\r\n          className={classNames('input__underline', {\r\n            'input__underline--focused': focused,\r\n          })}\r\n        />\r\n      </div>\r\n      <TransitionGroup component={null}>\r\n        {!!error && (\r\n          <Transition timeout={msToNum(tokens.base.durationM)}>\r\n            {status => (\r\n              <div\r\n                className={classNames('input__error', `input__error--${status}`)}\r\n                id={errorId}\r\n                role=\"alert\"\r\n                style={{\r\n                  '--height': isVisible(status)\r\n                    ? numToPx(errorRef.current?.getBoundingClientRect().height)\r\n                    : '0px',\r\n                }}\r\n              >\r\n                <div className=\"input__error-message\" ref={errorRef}>\r\n                  <Icon icon=\"error\" />\r\n                  {error}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </Transition>\r\n        )}\r\n      </TransitionGroup>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import { useState, useCallback, useRef } from 'react';\r\nimport classNames from 'classnames';\r\nimport { TransitionGroup, Transition } from 'react-transition-group';\r\nimport { Helmet } from 'react-helmet';\r\nimport Input from 'components/Input';\r\nimport DecoderText from 'components/DecoderText';\r\nimport Divider from 'components/Divider';\r\nimport { Button } from 'components/Button';\r\nimport Section from 'components/Section';\r\nimport Icon from 'components/Icon';\r\nimport Heading from 'components/Heading';\r\nimport Text from 'components/Text';\r\nimport { useScrollRestore, useFormInput, useRouteTransition } from 'hooks';\r\nimport { reflow, isVisible } from 'utils/transition';\r\nimport prerender from 'utils/prerender';\r\nimport { msToNum, numToPx, numToMs } from 'utils/style';\r\nimport { tokens } from 'components/ThemeProvider/theme';\r\nimport './index.css';\r\n\r\nconst initDelay = tokens.base.durationS;\r\n\r\nfunction getStatusError({\r\n  status,\r\n  errorMessage,\r\n  fallback = 'There was a problem with your request',\r\n}) {\r\n  if (status === 200) return false;\r\n\r\n  const statuses = {\r\n    500: 'There was a problem with the server, try again later',\r\n    404: 'There was a problem connecting to the server. Make sure you are connected to the internet',\r\n  };\r\n\r\n  if (errorMessage) {\r\n    return errorMessage;\r\n  }\r\n\r\n  return statuses[status] || fallback;\r\n}\r\n\r\nfunction getDelay(delayMs, initDelayMs = numToMs(0), multiplier = 1) {\r\n  const numDelay = msToNum(delayMs) * multiplier;\r\n  return { '--delay': numToMs((msToNum(initDelayMs) + numDelay).toFixed(0)) };\r\n}\r\n\r\nconst Contact = () => {\r\n  const { status } = useRouteTransition();\r\n  const errorRef = useRef();\r\n  const email = useFormInput('');\r\n  const message = useFormInput('');\r\n  const [sending, setSending] = useState(false);\r\n  const [complete, setComplete] = useState(false);\r\n  const [statusError, setStatusError] = useState('');\r\n  useScrollRestore();\r\n\r\n  const onSubmit = useCallback(\r\n    async event => {\r\n      event.preventDefault();\r\n      setStatusError('');\r\n\r\n      if (sending) return;\r\n\r\n      try {\r\n        setSending(true);\r\n\r\n        const response = await fetch('/api/message', {\r\n          method: 'POST',\r\n          mode: 'cors',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            email: email.value,\r\n            message: message.value,\r\n          }),\r\n        });\r\n\r\n        const responseMessage = await response.json();\r\n\r\n        const statusError = getStatusError({\r\n          status: response?.status,\r\n          errorMessage: responseMessage?.error,\r\n          fallback: 'There was a problem sending your message',\r\n        });\r\n\r\n        if (statusError) throw new Error(statusError);\r\n\r\n        setComplete(true);\r\n        setSending(false);\r\n      } catch (error) {\r\n        setSending(false);\r\n        setStatusError(error.message);\r\n      }\r\n    },\r\n    [email.value, message.value, sending]\r\n  );\r\n\r\n  return (\r\n    <Section className={classNames('contact', `contact--${status}`)}>\r\n      <Helmet>\r\n        <title>Contact | Saurabh Londhe</title>\r\n        <meta\r\n          name=\"description\"\r\n          content=\"Send me a message if you’re interested in discussing a project or if you just want to say hi\"\r\n        />\r\n      </Helmet>\r\n      <TransitionGroup component={null}>\r\n        {!complete && (\r\n          <Transition appear mountOnEnter unmountOnExit timeout={1600} onEnter={reflow}>\r\n            {status => (\r\n              <form className=\"contact__form\" method=\"post\" onSubmit={onSubmit}>\r\n                <Heading\r\n                  className={classNames('contact__title', `contact__title--${status}`, {\r\n                    'contact__title--hidden': prerender,\r\n                  })}\r\n                  level={3}\r\n                  as=\"h1\"\r\n                  style={getDelay(tokens.base.durationXS, initDelay, 0.3)}\r\n                >\r\n                  <DecoderText\r\n                    text=\"Say hello\"\r\n                    start={status !== 'exited' && !prerender}\r\n                    delay={300}\r\n                  />\r\n                </Heading>\r\n                <Divider\r\n                  className={classNames(\r\n                    'contact__divider',\r\n                    `contact__divider--${status}`,\r\n                    { 'contact__divider--hidden': prerender }\r\n                  )}\r\n                  style={getDelay(tokens.base.durationXS, initDelay, 0.4)}\r\n                />\r\n                <Input\r\n                  required\r\n                  className={classNames('contact__input', `contact__input--${status}`, {\r\n                    'contact__input--hidden': prerender,\r\n                  })}\r\n                  style={getDelay(tokens.base.durationXS, initDelay)}\r\n                  autoComplete=\"email\"\r\n                  label=\"Your Email\"\r\n                  type=\"email\"\r\n                  maxLength={512}\r\n                  {...email}\r\n                />\r\n                <Input\r\n                  required\r\n                  multiline\r\n                  className={classNames('contact__input', `contact__input--${status}`, {\r\n                    'contact__input--hidden': prerender,\r\n                  })}\r\n                  style={getDelay(tokens.base.durationS, initDelay)}\r\n                  autoComplete=\"off\"\r\n                  label=\"Message\"\r\n                  maxLength={4096}\r\n                  {...message}\r\n                />\r\n                <TransitionGroup component={null}>\r\n                  {!!statusError && (\r\n                    <Transition timeout={msToNum(tokens.base.durationM)}>\r\n                      {errorStatus => (\r\n                        <div\r\n                          className={classNames(\r\n                            'contact__form-error',\r\n                            `contact__form-error--${errorStatus}`\r\n                          )}\r\n                          style={{\r\n                            '--height': isVisible(errorStatus)\r\n                              ? numToPx(errorRef.current?.getBoundingClientRect().height)\r\n                              : '0px',\r\n                          }}\r\n                        >\r\n                          <div className=\"contact__form-error-content\" ref={errorRef}>\r\n                            <div className=\"contact__form-error-message\">\r\n                              <Icon className=\"contact__form-error-icon\" icon=\"error\" />\r\n                              {statusError}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </Transition>\r\n                  )}\r\n                </TransitionGroup>\r\n                <Button\r\n                  className={classNames('contact__button', `contact__button--${status}`, {\r\n                    'contact__button--hidden': prerender,\r\n                    'contact__button--sending': sending,\r\n                  })}\r\n                  style={getDelay(tokens.base.durationM, initDelay)}\r\n                  disabled={sending}\r\n                  loading={sending}\r\n                  loadingText=\"Sending...\"\r\n                  icon=\"send\"\r\n                  type=\"submit\"\r\n                >\r\n                  Send Message\r\n                </Button>\r\n              </form>\r\n            )}\r\n          </Transition>\r\n        )}\r\n        {complete && (\r\n          <Transition appear mountOnEnter unmountOnExit onEnter={reflow} timeout={0}>\r\n            {status => (\r\n              <div className=\"contact__complete\" aria-live=\"polite\">\r\n                <Heading\r\n                  level={3}\r\n                  as=\"h3\"\r\n                  className={classNames(\r\n                    'contact__complete-title',\r\n                    `contact__complete-title--${status}`\r\n                  )}\r\n                >\r\n                  Message Sent\r\n                </Heading>\r\n                <Text\r\n                  size=\"l\"\r\n                  className={classNames(\r\n                    'contact__complete-text',\r\n                    `contact__complete-text--${status}`\r\n                  )}\r\n                  style={getDelay(tokens.base.durationXS)}\r\n                >\r\n                  I’ll get back to you within a couple days\r\n                </Text>\r\n                <Button\r\n                  secondary\r\n                  iconHoverShift\r\n                  className={classNames(\r\n                    'contact__complete-button',\r\n                    `contact__complete-button--${status}`\r\n                  )}\r\n                  style={getDelay(tokens.base.durationM)}\r\n                  href=\"/\"\r\n                  icon=\"chevronRight\"\r\n                >\r\n                  Back to homepage\r\n                </Button>\r\n              </div>\r\n            )}\r\n          </Transition>\r\n        )}\r\n      </TransitionGroup>\r\n    </Section>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n","/**\r\n * Returns true if being prerendered by react-snap. Useful for stuff\r\n * that needs to only run client-side and not during prerendering\r\n */\r\nconst prerender = navigator.userAgent === 'ReactSnap';\r\nexport default prerender;\r\n","import { forwardRef } from 'react';\r\nimport classNames from 'classnames';\r\nimport './index.css';\r\n\r\nconst Section = forwardRef(\r\n  ({ as: Component = 'div', children, className, ...rest }, ref) => (\r\n    <Component className={classNames('section', className)} ref={ref} {...rest}>\r\n      {children}\r\n    </Component>\r\n  )\r\n);\r\n\r\nexport default Section;\r\n","export default __webpack_public_path__ + \"static/media/gotham-bold.73ce573b.woff2\";","import { Fragment } from 'react';\r\nimport classNames from 'classnames';\r\nimport { Helmet } from 'react-helmet';\r\nimport GothamBold from 'assets/fonts/gotham-bold.woff2';\r\nimport './index.css';\r\n\r\nconst Heading = ({\r\n  children,\r\n  level = 1,\r\n  as,\r\n  align = 'auto',\r\n  weight = 'medium',\r\n  className,\r\n  ...rest\r\n}) => {\r\n  const clampedLevel = Math.min(Math.max(level, 0), 4);\r\n  const Component = as || `h${Math.max(clampedLevel, 1)}`;\r\n\r\n  return (\r\n    <Fragment>\r\n      {/* Conditionally load the bold font weight because we use it less frequently */}\r\n      {weight === 'bold' && (\r\n        <Helmet>\r\n          <link rel=\"preload\" href={GothamBold} as=\"font\" crossorigin=\"\" />\r\n          <style>\r\n            {`\r\n              @font-face {\r\n                font-family: 'Gotham';\r\n                font-weight: 700;\r\n                src: url(${GothamBold}) format('woff2');\r\n                font-display: swap;\r\n              }\r\n            `}\r\n          </style>\r\n        </Helmet>\r\n      )}\r\n      <Component\r\n        className={classNames(\r\n          className,\r\n          'heading',\r\n          `heading--align-${align}`,\r\n          `heading--level-${clampedLevel}`,\r\n          `heading--weight-${weight}`\r\n        )}\r\n        {...rest}\r\n      >\r\n        {children}\r\n      </Component>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Heading;\r\n","import classNames from 'classnames';\r\nimport './index.css';\r\n\r\nconst Text = ({\r\n  children,\r\n  size = 'm',\r\n  as: Component = 'p',\r\n  align = 'auto',\r\n  weight = 'auto',\r\n  secondary,\r\n  className,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <Component\r\n      className={classNames(\r\n        className,\r\n        'text',\r\n        `text--align-${align}`,\r\n        `text--size-${size}`,\r\n        `text--weight-${weight}`,\r\n        {\r\n          'text--secondary': secondary,\r\n        }\r\n      )}\r\n      {...rest}\r\n    >\r\n      {children}\r\n    </Component>\r\n  );\r\n};\r\n\r\nexport default Text;\r\n"],"sourceRoot":""}