{"version":3,"sources":["assets/scene.glb","components/Portrait/index.js"],"names":["RectAreaLightUniformsLib","init","Portrait","className","delay","rest","rgbBackgroundLight","themeId","useTheme","container","useRef","canvas","renderer","camera","scene","lights","prefersReducedMotion","usePrefersReducedMotion","isInViewport","useInViewport","useEffect","clientWidth","clientHeight","current","WebGLRenderer","antialias","powerPreference","setSize","setPixelRatio","toneMapping","ACESFilmicToneMapping","outputEncoding","sRGBEncoding","PerspectiveCamera","position","z","Scene","fog","Fog","dracoLoader","DRACOLoader","setDecoderPath","modelLoader","GLTFLoader","setDRACOLoader","load","portraitModelPath","model","y","add","render","cleanScene","cleanRenderer","ambientLight","AmbientLight","rectLight1","RectAreaLight","set","lookAt","rectLight2","forEach","light","background","Color","rgbToThreeColor","color","far","removeLights","rotationSpring","rotationSpringValue","onMouseMove","event","rotation","innerWidth","innerHeight","window","clientX","clientY","value","x","spring","from","get","to","stiffness","damping","velocity","getVelocity","restSpeed","mass","start","addEventListener","removeEventListener","stop","handleResize","aspect","updateProjectionMatrix","classNames","ref","style","role"],"mappings":"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","file":"static/js/13.81318e7e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/scene.0d34c763.glb\";","import { useRef, useEffect } from 'react';\r\nimport classNames from 'classnames';\r\nimport {\r\n  WebGLRenderer,\r\n  ACESFilmicToneMapping,\r\n  sRGBEncoding,\r\n  PerspectiveCamera,\r\n  Scene,\r\n  Fog,\r\n  Color,\r\n  AmbientLight,\r\n  RectAreaLight,\r\n} from 'three';\r\nimport { spring, value } from 'popmotion';\r\nimport { RectAreaLightUniformsLib } from 'three/examples/jsm/lights/RectAreaLightUniformsLib.js';\r\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport { usePrefersReducedMotion, useInViewport } from 'hooks';\r\nimport { cleanScene, cleanRenderer, removeLights } from 'utils/three';\r\nimport { rgbToThreeColor } from 'utils/style';\r\nimport { useTheme } from 'components/ThemeProvider';\r\nimport portraitModelPath from 'assets/scene.glb';\r\nimport './index.css';\r\n\r\nRectAreaLightUniformsLib.init();\r\n\r\nconst Portrait = ({ className, delay, ...rest }) => {\r\n  const { rgbBackgroundLight, themeId } = useTheme();\r\n  const container = useRef();\r\n  const canvas = useRef();\r\n  const renderer = useRef();\r\n  const camera = useRef();\r\n  const scene = useRef();\r\n  const lights = useRef();\r\n  const prefersReducedMotion = usePrefersReducedMotion();\r\n  const isInViewport = useInViewport(container);\r\n\r\n  // Init scene and models\r\n  useEffect(() => {\r\n    const { clientWidth, clientHeight } = container.current;\r\n\r\n    renderer.current = new WebGLRenderer({\r\n      antialias: false,\r\n      canvas: canvas.current,\r\n      powerPreference: 'high-performance',\r\n    });\r\n    renderer.current.setSize(clientWidth, clientHeight);\r\n    renderer.current.setPixelRatio(2);\r\n    renderer.current.toneMapping = ACESFilmicToneMapping;\r\n    renderer.current.outputEncoding = sRGBEncoding;\r\n\r\n    camera.current = new PerspectiveCamera(45, clientWidth / clientHeight, 0.5, 2.25);\r\n    camera.current.position.z = 0.8;\r\n\r\n    scene.current = new Scene();\r\n    scene.current.fog = new Fog(0xffffff, 0, 2.25);\r\n\r\n    const dracoLoader = new DRACOLoader();\r\n    dracoLoader.setDecoderPath('/draco');\r\n\r\n    const modelLoader = new GLTFLoader();\r\n    modelLoader.setDRACOLoader(dracoLoader);\r\n\r\n    modelLoader.load(portraitModelPath, model => {\r\n      model.scene.position.y = -1.6;\r\n      scene.current.add(model.scene);\r\n\r\n      renderer.current.render(scene.current, camera.current);\r\n    });\r\n\r\n    return () => {\r\n      cleanScene(scene.current);\r\n      cleanRenderer(renderer.current);\r\n    };\r\n  }, []);\r\n\r\n  // Lights\r\n  useEffect(() => {\r\n    const ambientLight = new AmbientLight(0xffffff, themeId === 'dark' ? 0.1 : 0.2);\r\n\r\n    const rectLight1 = new RectAreaLight(0xffffff, 6, 10, 10);\r\n    rectLight1.position.set(4.5, -1.3, -3);\r\n    rectLight1.lookAt(0, 0, 0);\r\n\r\n    const rectLight2 = new RectAreaLight(0xffffff, 6, 15, 15);\r\n    rectLight2.position.set(-10, 0.7, -10);\r\n    rectLight2.lookAt(0, 0, 0);\r\n\r\n    lights.current = [ambientLight, rectLight1, rectLight2];\r\n    lights.current.forEach(light => scene.current.add(light));\r\n\r\n    scene.current.background = new Color(...rgbToThreeColor(rgbBackgroundLight));\r\n    scene.current.fog.color = new Color(...rgbToThreeColor(rgbBackgroundLight));\r\n    scene.current.fog.far = 10;\r\n\r\n    return () => {\r\n      removeLights(lights.current);\r\n    };\r\n  }, [themeId, rgbBackgroundLight]);\r\n\r\n  // Handle mouse move animation\r\n  useEffect(() => {\r\n    let rotationSpring;\r\n    let rotationSpringValue;\r\n\r\n    const onMouseMove = event => {\r\n      const { rotation } = scene.current;\r\n      const { innerWidth, innerHeight } = window;\r\n\r\n      const position = {\r\n        x: (event.clientX - innerWidth / 2) / innerWidth,\r\n        y: (event.clientY - innerHeight / 2) / innerHeight,\r\n      };\r\n\r\n      if (!rotationSpringValue) {\r\n        rotationSpringValue = value({ x: rotation.x, y: rotation.y }, ({ x, y }) => {\r\n          rotation.set(x, y, rotation.z);\r\n          renderer.current.render(scene.current, camera.current);\r\n        });\r\n      }\r\n\r\n      rotationSpring = spring({\r\n        from: rotationSpringValue.get(),\r\n        to: { x: position.y / 2, y: position.x / 2 },\r\n        stiffness: 40,\r\n        damping: 40,\r\n        velocity: rotationSpringValue.getVelocity(),\r\n        restSpeed: 0.00001,\r\n        mass: 1.4,\r\n      }).start(rotationSpringValue);\r\n    };\r\n\r\n    if (isInViewport && !prefersReducedMotion) {\r\n      window.addEventListener('mousemove', onMouseMove);\r\n    }\r\n\r\n    return function cleanup() {\r\n      window.removeEventListener('mousemove', onMouseMove);\r\n\r\n      rotationSpring?.stop();\r\n    };\r\n  }, [isInViewport, prefersReducedMotion]);\r\n\r\n  // Handles window resize\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      const { clientWidth, clientHeight } = container.current;\r\n\r\n      renderer.current.setSize(clientWidth, clientHeight);\r\n      camera.current.aspect = clientWidth / clientHeight;\r\n      camera.current.updateProjectionMatrix();\r\n\r\n      // Render a single frame on resize\r\n      renderer.current.render(scene.current, camera.current);\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    handleResize();\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className={classNames('portrait', `portrait--${themeId}`, className)}\r\n      ref={container}\r\n      style={{ '--delay': delay }}\r\n      role=\"img\"\r\n      aria-label=\"A 3D portrait of myself.\"\r\n      {...rest}\r\n    >\r\n      <canvas aria-hidden className=\"portrait__canvas\" ref={canvas} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Portrait;\r\n"],"sourceRoot":""}